class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        long long xorr=0;
        for(int i=0;i<nums.size();i++){
            xorr=xorr^nums[i];
        }
        long long key=(xorr & (xorr-1))^xorr;
        int b1=0;
        int b2=0;
        for(int &num : nums){
            if((key & num)==0)
                b1=b1^num;
            else
                b2=b2^num;
        }
        return {b1,b2};
    }
};

notes:
    approach:
	1. store the xor of all elements in a variable
	2. do a operation key= (xorr& (xorr-1))^xorr
			purpose: find the rightmost 1 bit.
	3. now iterate every num and do & op 
		if : ans =0 push on a;
		else: push on b;
	4. return {b,a} any order as its not specific.